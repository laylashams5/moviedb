{"version":3,"file":"ngx-skeleton-loader.js","sources":["../../../projects/ngx-skeleton-loader/src/lib/ngx-skeleton-loader-config.types.ts","../../../projects/ngx-skeleton-loader/src/lib/ngx-skeleton-loader.component.ts","../../../projects/ngx-skeleton-loader/src/lib/ngx-skeleton-loader.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport type NgxSkeletonLoaderConfigTheme = {\n  // This is required since ngStyle is using `any` as well\n  // More details in https://angular.io/api/common/NgStyle\n  // tslint:disable-next-line: no-any\n  [k: string]: any;\n} | null;\n\nexport interface NgxSkeletonLoaderConfig {\n  appearance: 'circle' | 'line' | '';\n  animation: 'progress' | 'progress-dark' | 'pulse' | 'false' | false;\n  theme: NgxSkeletonLoaderConfigTheme;\n  loadingText: string;\n  count: number;\n  ariaLabel: string;\n}\n\nexport const NGX_SKELETON_LOADER_CONFIG = new InjectionToken<NgxSkeletonLoaderConfig>('ngx-skeleton-loader.config');\n","import {\n  Component,\n  OnInit,\n  Input,\n  isDevMode,\n  OnDestroy,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  OnChanges,\n  SimpleChanges,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport { start, end } from 'perf-marks/marks';\nimport {\n  NgxSkeletonLoaderConfig,\n  NgxSkeletonLoaderConfigTheme,\n  NGX_SKELETON_LOADER_CONFIG,\n} from './ngx-skeleton-loader-config.types';\n\n@Component({\n  selector: 'ngx-skeleton-loader',\n  templateUrl: './ngx-skeleton-loader.html',\n  styleUrls: ['./ngx-skeleton-loader.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxSkeletonLoaderComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges {\n  // tslint:disable-next-line: variable-name\n  static ngAcceptInputType_count: number | string;\n  // tslint:disable-next-line: variable-name\n  static ngAcceptInputType_animation: boolean | string;\n\n  @Input()\n  count: NgxSkeletonLoaderConfig['count'];\n\n  @Input()\n  loadingText: NgxSkeletonLoaderConfig['loadingText'];\n\n  @Input()\n  appearance: NgxSkeletonLoaderConfig['appearance'];\n\n  @Input()\n  animation: NgxSkeletonLoaderConfig['animation'];\n\n  @Input()\n  ariaLabel: NgxSkeletonLoaderConfig['ariaLabel'];\n\n  @Input()\n  theme: NgxSkeletonLoaderConfigTheme;\n\n  // tslint:disable-next-line: no-any\n  items: Array<any>;\n\n  constructor(@Inject(NGX_SKELETON_LOADER_CONFIG) @Optional() config?: NgxSkeletonLoaderConfig) {\n    const {\n      appearance = 'line',\n      animation = 'progress',\n      theme = null,\n      loadingText = 'Loading...',\n      count = 1,\n      ariaLabel = 'loading',\n    } = config || {};\n\n    this.appearance = appearance;\n    this.animation = animation;\n    this.theme = theme;\n    this.loadingText = loadingText;\n    this.count = count;\n    this.items = [];\n    this.ariaLabel = ariaLabel;\n  }\n\n  ngOnInit() {\n    start('NgxSkeletonLoader:Rendered');\n    start('NgxSkeletonLoader:Loaded');\n\n    this.validateInputValues();\n  }\n\n  private validateInputValues() {\n    // Checking if it's receiving a numeric value (string having ONLY numbers or if it's a number)\n    if (!/^\\d+$/.test(`${this.count}`)) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` need to receive 'count' a numeric value. Forcing default to \"1\".`,\n        );\n      }\n      this.count = 1;\n    }\n    this.items.length = this.count;\n\n    const allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];\n    if (allowedAnimations.indexOf(String(this.animation)) === -1) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` need to receive 'animation' as: ${allowedAnimations.join(\n            ', ',\n          )}. Forcing default to \"progress\".`,\n        );\n      }\n      this.animation = 'progress';\n    }\n\n    if (['circle', 'line', ''].indexOf(String(this.appearance)) === -1) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` need to receive 'appearance' as: circle or line or empty string. Forcing default to \"''\".`,\n        );\n      }\n      this.appearance = '';\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Avoiding multiple calls for the same input in case there's no changes in the fields\n    // Checking if the fields that require validation are available and if they were changed\n    // In case were not changed, we stop the function. Otherwise, `validateInputValues` will be called.\n    if (\n      ['count', 'animation', 'appearance'].find(\n        key =>\n          changes[key] && (changes[key].isFirstChange() || changes[key].previousValue === changes[key].currentValue),\n      )\n    ) {\n      return;\n    }\n\n    this.validateInputValues();\n  }\n\n  ngAfterViewInit() {\n    end('NgxSkeletonLoader:Rendered');\n  }\n\n  ngOnDestroy() {\n    end('NgxSkeletonLoader:Loaded');\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxSkeletonLoaderComponent } from './ngx-skeleton-loader.component';\nimport { NgxSkeletonLoaderConfig, NGX_SKELETON_LOADER_CONFIG } from './ngx-skeleton-loader-config.types';\n\n@NgModule({\n  declarations: [NgxSkeletonLoaderComponent],\n  imports: [CommonModule],\n  exports: [NgxSkeletonLoaderComponent],\n})\nexport class NgxSkeletonLoaderModule {\n  static forRoot(config?: Partial<NgxSkeletonLoaderConfig>): ModuleWithProviders<NgxSkeletonLoaderModule> {\n    return {\n      ngModule: NgxSkeletonLoaderModule,\n      providers: [{ provide: NGX_SKELETON_LOADER_CONFIG, useValue: config }],\n    };\n  }\n}\n"],"names":[],"mappings":"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"}